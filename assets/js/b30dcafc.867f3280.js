"use strict";(self.webpackChunksystem_design_101_docs=self.webpackChunksystem_design_101_docs||[]).push([[1791],{4442:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"load balancing/intro","title":"Load balancing","description":"Helps distribute incoming requests and traffic evenly across multiple servers.","source":"@site/docs/load balancing/intro.md","sourceDirName":"load balancing","slug":"/load balancing/intro","permalink":"/system-design-101/docs/load balancing/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"CAP Theory","permalink":"/system-design-101/docs/cap-theory"},"next":{"title":"Load Balancing Algorithms","permalink":"/system-design-101/docs/load balancing/load_balancing_algorithms"}}');var s=r(4848),t=r(8453);const i={sidebar_position:1},o="Load balancing",l={},c=[{value:"How it works",id:"how-it-works",level:2},{value:"Each Layer",id:"each-layer",level:2},{value:"Key terminology",id:"key-terminology",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"load-balancing",children:"Load balancing"})}),"\n",(0,s.jsx)(n.p,{children:"Helps distribute incoming requests and traffic evenly across multiple servers."}),"\n",(0,s.jsx)(n.p,{children:"The main goal of load balancing is to ensure high availability, reliability, and performance by avoiding overloading a single server and avoiding downtime."}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The load balancer receives a request from the client."}),"\n",(0,s.jsx)(n.li,{children:"It selects a backend server using a load-balancing algorithm."}),"\n",(0,s.jsx)(n.li,{children:"The request is forwarded to the chosen server."}),"\n",(0,s.jsx)(n.li,{children:"The server processes the request and sends the response back to the load balancer."}),"\n",(0,s.jsx)(n.li,{children:"The load balancer returns the response to the client."}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n  participant Client\n  participant LoadBalancer\n  participant Server\n\n  Client->>LoadBalancer: Sends request\n  LoadBalancer->>LoadBalancer: Evaluate request (algorithm, health, etc.)\n  LoadBalancer->>Server: Forward request\n  Server->>Server: Process request\n  Server->>LoadBalancer: Send response\n  LoadBalancer->>Client: Return response"}),"\n",(0,s.jsx)(n.h2,{id:"each-layer",children:"Each Layer"}),"\n",(0,s.jsx)(n.p,{children:"Between the user and the web servers."}),"\n",(0,s.jsx)(n.p,{children:"Between web servers and an internal platform layer, like application servers or cache servers."}),"\n",(0,s.jsx)(n.p,{children:"Between internal platform layer and database."}),"\n",(0,s.jsx)(n.mermaid,{value:'graph LR\n    User1["User1"]\n    User2["User2"]\n    User3["User3"]\n    LB1{"Edge Load Balancer"}\n    Web1["Web Server 1"]\n    Web2["Web Server 2"]\n    LB2{"Platform Load Balancer"}\n    App1["App/Cache Server 1"]\n    App2["App/Cache Server 2"]\n    LB3{"Data Load Balancer"}\n    DB1[("Database 1")]\n    DB2[("Database 2")]\n\n    User1 --\x3e LB1\n    User2 --\x3e LB1\n    User3 --\x3e LB1\n    LB1 --\x3e Web1\n    LB1 --\x3e Web2\n    Web1 --\x3e LB2\n    Web2 --\x3e LB2\n    LB2 --\x3e App1\n    LB2 --\x3e App2\n    App1 --\x3e LB3\n    App2 --\x3e LB3\n    LB3 --\x3e DB1\n    LB3 --\x3e DB2'}),"\n",(0,s.jsx)(n.h2,{id:"key-terminology",children:"Key terminology"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load balancer"}),": A device or software that distributes incoming network traffic across multiple servers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend server"}),": The servers that receive and process requests forwarded by the load balancer. Also referred to as the server pool or server farm.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Server pool/server farm: This means there are multiple backend servers working together."}),"\n",(0,s.jsx)(n.li,{children:"Using a pool of backend servers allows for horizontal scaling (adding more servers as needed), better fault tolerance (if one server fails, others can continue)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load Balancing Algorithm"}),": A method used by the load balancer to determine how to distribute incoming requests among the backend servers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Health Check"}),": Periodic tests performed by the load balancer to determine the availability and performance of backend servers. Unhealthy servers are removed from the server pool until they recover."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Session Persistence (Sticky Sessions)"}),": A technique used to ensure that a user's requests are consistently directed to the same backend server for the duration of their session. This is important for applications that maintain state information on the server side."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SSL/TLS Termination"}),": The process of decrypting SSL/TLS traffic at the load balancer level, allowing backend servers to handle unencrypted traffic. This offloads the computationally intensive task of encryption/decryption from the backend servers.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["SSL nowadays is mostly replaced by TLS, but the term SSL is still commonly used to refer to both protocols.","\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client\n    participant Server\n\n    Client->>Server: ClientHello (TLS version, ciphers, random)\n    Server->>Client: ServerHello (chosen cipher, random, certificate)\n    Client->>Client: Verify certificate (CA, domain, validity)\n    Client->>Server: Key exchange (RSA or ECDHE)\n    Server->>Client: Key exchange confirmation\n    Client->>Server: Finished (encrypted)\n    Server->>Client: Finished (encrypted)\n    Note over Client,Server: Secure session established \ud83d\udd12"}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var a=r(6540);const s={},t=a.createContext(s);function i(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);