"use strict";(self.webpackChunksystem_design_101_docs=self.webpackChunksystem_design_101_docs||[]).push([[5952],{8680:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"System design fundamentals","href":"/system-design-101/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"CAP Theory","href":"/system-design-101/docs/cap-theory","docId":"cap-theory","unlisted":false},{"type":"category","label":"load balancing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Load balancing","href":"/system-design-101/docs/load balancing/intro","docId":"load balancing/intro","unlisted":false},{"type":"link","label":"Load Balancing Algorithms","href":"/system-design-101/docs/load balancing/load_balancing_algorithms","docId":"load balancing/load_balancing_algorithms","unlisted":false},{"type":"link","label":"Scalability and Performance","href":"/system-design-101/docs/load balancing/challenges","docId":"load balancing/challenges","unlisted":false}]},{"type":"link","label":"API Gateway","href":"/system-design-101/docs/api-gateway","docId":"api-gateway","unlisted":false},{"type":"link","label":"Bloom Filters (TODO)","href":"/system-design-101/docs/bloom filter","docId":"bloom filter","unlisted":false},{"type":"link","label":"Domain Name System (DNS)","href":"/system-design-101/docs/domain name system","docId":"domain name system","unlisted":false},{"type":"link","label":"Caching","href":"/system-design-101/docs/caching","docId":"caching","unlisted":false},{"type":"link","label":"Indexes","href":"/system-design-101/docs/Indexes","docId":"Indexes","unlisted":false},{"type":"link","label":"Security","href":"/system-design-101/docs/security/","docId":"security/security","unlisted":false},{"type":"category","label":"OOD","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"SOLID","href":"/system-design-101/docs/OOD/solid","docId":"OOD/solid","unlisted":false}]},{"type":"category","label":"async and concurrency","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Concurrency","href":"/system-design-101/docs/async and concurrency/concurrency","docId":"async and concurrency/concurrency","unlisted":false},{"type":"link","label":"Async Programming","href":"/system-design-101/docs/async and concurrency/async programming","docId":"async and concurrency/async programming","unlisted":false},{"type":"link","label":"Synchronization Constructs","href":"/system-design-101/docs/async and concurrency/synchronization constructs","docId":"async and concurrency/synchronization constructs","unlisted":false}]},{"type":"category","label":"messaging system","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Messaging System","href":"/system-design-101/docs/messaging system/intro-message-system","docId":"messaging system/intro-message-system","unlisted":false},{"type":"link","label":"Kafka (TODO)","href":"/system-design-101/docs/messaging system/kafka","docId":"messaging system/kafka","unlisted":false}]},{"type":"category","label":"networks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HTTP vs. HTTPS (In progress)","href":"/system-design-101/docs/networks/http-vs-https","docId":"networks/http-vs-https","unlisted":false},{"type":"link","label":"TCP vs. UDP (TODO)","href":"/system-design-101/docs/networks/tcp-vs-udp","docId":"networks/tcp-vs-udp","unlisted":false}]},{"type":"link","label":"Quorum","href":"/system-design-101/docs/quorum","docId":"quorum","unlisted":false}]},"docs":{"api-gateway":{"id":"api-gateway","title":"API Gateway","description":"An API Gateway is a server-side architectural component in a software system that acts as an intermediary between clients (such as web browsers, mobile apps, or other services) and backend services, microservices, or APIs.","sidebar":"tutorialSidebar"},"async and concurrency/async programming":{"id":"async and concurrency/async programming","title":"Async Programming","description":"Asynchronous programming is a programming paradigm that allows a program to perform tasks without blocking the main thread. In this detail will use Dotnet usually we talk about two main categories of work to use async / await:","sidebar":"tutorialSidebar"},"async and concurrency/concurrency":{"id":"async and concurrency/concurrency","title":"Concurrency","description":"- Multithreading Multithreading is the ability of a central processing unit (CPU) (or a single core in a multi-core processor) to provide multiple threads of execution concurrently, supported by the operating system. A thread is the smallest sequence of programmed instructions that can be managed independently by a scheduler.","sidebar":"tutorialSidebar"},"async and concurrency/synchronization constructs":{"id":"async and concurrency/synchronization constructs","title":"Synchronization Constructs","description":"Synchronization constructs are mechanisms that help manage access to shared resources in a concurrent environment, ensuring that multiple threads or processes can operate safely without causing data corruption or inconsistencies.","sidebar":"tutorialSidebar"},"bloom filter":{"id":"bloom filter","title":"Bloom Filters (TODO)","description":"","sidebar":"tutorialSidebar"},"caching":{"id":"caching","title":"Caching","description":"high speed data storage layer that sit between the client and the main data source (like a database or an API) to store frequently accessed data temporarily. This allows for quicker data retrieval, reducing latency and improving overall system performance.","sidebar":"tutorialSidebar"},"cap-theory":{"id":"cap-theory","title":"CAP Theory","description":"it is impossible for a distributed system to simultaneously provide all three properties: consistency, availability, and partition tolerance.","sidebar":"tutorialSidebar"},"domain name system":{"id":"domain name system","title":"Domain Name System (DNS)","description":"The Domain Name System (DNS) is a hierarchical and decentralized naming system used to translate human-readable domain names (like www.example.com) into machine-readable IP addresses (like 192.0.1.1)","sidebar":"tutorialSidebar"},"Indexes":{"id":"Indexes","title":"Indexes","description":"Indexes are well known when it comes to databases. Sooner or later there comes a time when database performance is no longer satisfactory. One of the very first things you should turn to when that happens is database indexing.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"System design fundamentals","description":"This is a collection of notes and resources for learning system design fundamentals. The goal is to provide a comprehensive overview of the key concepts and principles of system design.","sidebar":"tutorialSidebar"},"load balancing/challenges":{"id":"load balancing/challenges","title":"Scalability and Performance","description":"Redundancy and failover strategies","sidebar":"tutorialSidebar"},"load balancing/intro":{"id":"load balancing/intro","title":"Load balancing","description":"Helps distribute incoming requests and traffic evenly across multiple servers.","sidebar":"tutorialSidebar"},"load balancing/load_balancing_algorithms":{"id":"load balancing/load_balancing_algorithms","title":"Load Balancing Algorithms","description":"Round Robin","sidebar":"tutorialSidebar"},"messaging system/intro-message-system":{"id":"messaging system/intro-message-system","title":"Messaging System","description":"Transfer data among services, applications, processes, or servers. Such a system helps decouple different parts of a distributed system, providing asynchronous way of communication messages between Sender and Receiver. So all senders (or producers) and receivers (or consumers) focus on the data/message without worrying about how the mechanism used to share the data.","sidebar":"tutorialSidebar"},"messaging system/kafka":{"id":"messaging system/kafka","title":"Kafka (TODO)","description":"","sidebar":"tutorialSidebar"},"networks/http-vs-https":{"id":"networks/http-vs-https","title":"HTTP vs. HTTPS (In progress)","description":"When it comes to web communication, two protocols dominate the landscape: HTTP (HyperText Transfer Protocol) and HTTPS (HyperText Transfer Protocol Secure). Understanding the differences between these two protocols is crucial for ensuring secure and efficient data transmission over the internet.","sidebar":"tutorialSidebar"},"networks/tcp-vs-udp":{"id":"networks/tcp-vs-udp","title":"TCP vs. UDP (TODO)","description":"","sidebar":"tutorialSidebar"},"OOD/solid":{"id":"OOD/solid","title":"SOLID","description":"Guide for helping developers create better-structured, more manageable object-oriented programming (OOP) code.","sidebar":"tutorialSidebar"},"quorum":{"id":"quorum","title":"Quorum","description":"Quorum is a concept used in distributed systems to ensure consistency and reliability. It refers to the minimum number of nodes or replicas that must agree on a decision before it can be considered valid. Quorum is often used in consensus algorithms, such as Paxos and Raft, to ensure that a majority of nodes agree on a value before it is committed.","sidebar":"tutorialSidebar"},"security/security":{"id":"security/security","title":"Security","description":"Authentication","sidebar":"tutorialSidebar"}}}}')}}]);