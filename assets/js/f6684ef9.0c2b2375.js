"use strict";(self.webpackChunksystem_design_101_docs=self.webpackChunksystem_design_101_docs||[]).push([[6443],{8243:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"async and concurrency/async programming","title":"Async Programming","description":"Asynchronous programming is a programming paradigm that allows a program to perform tasks without blocking the main thread. In this detail will use Dotnet usually we talk about two main categories of work to use async / await:","source":"@site/docs/async and concurrency/async programming.md","sourceDirName":"async and concurrency","slug":"/async and concurrency/async programming","permalink":"/system-design-101/docs/async and concurrency/async programming","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Concurrency","permalink":"/system-design-101/docs/async and concurrency/concurrency"},"next":{"title":"Synchronization Constructs","permalink":"/system-design-101/docs/async and concurrency/synchronization constructs"}}');var r=s(4848),t=s(8453);const i={sidebar_position:2},c="Async Programming",l={},o=[{value:"Common pitfalls",id:"common-pitfalls",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"async-programming",children:"Async Programming"})}),"\n",(0,r.jsxs)(e.p,{children:["Asynchronous programming is a programming paradigm that allows a program to perform tasks without blocking the main thread. In this detail will use Dotnet usually we talk about two main categories of work to use ",(0,r.jsx)(e.strong,{children:"async / await"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"I/O-bound operations"}),":"]}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Definition: Waiting for external (disk, database, network, web service, file I/O)."}),"\n",(0,r.jsx)(e.li,{children:"CPU isn't doing much work during the wait, so async lets the thread go do something else."}),"\n",(0,r.jsx)(e.li,{children:"Examples:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:'// Example: calling a web API\nvar responseT = httpClient.GetAsync("https://api.example.com/data");\nvar content = await response.Content.ReadAsStringAsync();\n\n\nvar result = await response;\n\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"CPU-bound operations"}),":"]}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Definition: Code that keeps the CPU busy (calculations, image processing, encryption, ML inference)."}),"\n",(0,r.jsx)(e.li,{children:"If await it directly, it will blocks the thread."}),"\n",(0,r.jsxs)(e.li,{children:["Solution: Run it on a separate thread using ",(0,r.jsx)(e.strong,{children:"Task.Run."})]}),"\n",(0,r.jsx)(e.li,{children:"Examples:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"// Example: heavy calculation\nvar result = await Task.Run(() => HeavyComputation());\n"})}),"\n",(0,r.jsx)(e.h2,{id:"common-pitfalls",children:"Common pitfalls"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"I/O-Bound"})}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u274c Don\u2019t wrap I/O calls in Task.Run","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:'// BAD: wastes a thread just to wait\nawait Task.Run(() => File.ReadAllText("file.txt"));\n'})}),"\n","Instead, use the real async API:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:'// GOOD\nvar content = await File.ReadAllTextAsync("file.txt");\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\u274c Don\u2019t block async calls with ",(0,r.jsx)(e.strong,{children:".Result"})," or ",(0,r.jsx)(e.strong,{children:".Wait()"}),"\nThat can deadlock, especially in ASP.NET or UI apps:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:'// BAD: can deadlock\nvar data = httpClient.GetAsync("https://api.example.com/data").Result;\n'})}),"\n","Use ",(0,r.jsx)(e.strong,{children:"await"})," instead. Why? Dotnet will treats this to synchronous code and can cause deadlock."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["2 ",(0,r.jsx)(e.strong,{children:"CPU-Bound"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u274c Don\u2019t mark a CPU-heavy method as async without offloading.","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"// BAD: this still blocks the calling thread\npublic async Task<int> Calculate()\n{\n    return HeavyWork(); // synchronous\n}\n"})}),"\n","Instead, offload it:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"// GOOD: run on background thread\npublic Task<int> Calculate()\n{\n    return Task.Run(() => HeavyWork());\n}\n\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:['\u274c Don\u2019t use Task.Run on ASP.NET server-side just to "make it async" That removes threads from the pool and hurts scalability. Only use it for real CPU work.',"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:'    public async Task<IActionResult> ProcessImage(IFormFile file)\n    {\n        var result = await Task.Run(() => _imageProcessor.Resize(file));\n        return File(result, "image/png");\n    }\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"CPU is crunching data."}),"\n",(0,r.jsx)(e.li,{children:"No async API exists."}),"\n",(0,r.jsx)(e.li,{children:"Offloading keeps ASP.NET threads free for handling new requests."}),"\n"]}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>c});var a=s(6540);const r={},t=a.createContext(r);function i(n){const e=a.useContext(t);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(t.Provider,{value:e},n.children)}}}]);